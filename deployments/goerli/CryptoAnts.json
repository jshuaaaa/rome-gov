{
  "address": "0x62dab06b5BcD3B87BC5547012DD84ba2c4274356",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eggs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AntNotYours",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CantAffordEggs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CantEnter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoEggs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TxnFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongEtherSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "cantLayEggsRightNow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AntCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "AntDied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AntSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "EggsBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "GotRequestId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "MintedRandomEggs",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ants",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canLayEggs",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timeOfLastLaidEgg",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "antsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyEggs",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_antId",
          "type": "uint256"
        }
      ],
      "name": "canAntLayEggs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "changePriceOfEgg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createAnt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eggPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eggs",
      "outputs": [
        {
          "internalType": "contract IEgg",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAntsCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_antId",
          "type": "uint256"
        }
      ],
      "name": "layEggs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_antId",
          "type": "uint256"
        }
      ],
      "name": "sellAnt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewGovernanceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x47bf68e42ae23a2c2b992a0fb7f9298941ac8d81c16b78fee2cfcc1d7d427767",
  "receipt": {
    "to": null,
    "from": "0x47cf9BdD2f1e8aFD7F263d493F98Be319d4ea92A",
    "contractAddress": "0x62dab06b5BcD3B87BC5547012DD84ba2c4274356",
    "transactionIndex": 70,
    "gasUsed": "2055964",
    "logsBloom": "0x
    "blockHash": "0x9b21f11a331bc2889ac38cc4eb28964c415f292b3eefce61bc9d7c2c1d0131ae",
    "transactionHash": "0x47bf68e42ae23a2c2b992a0fb7f9298941ac8d81c16b78fee2cfcc1d7d427767",
    "logs": [],
    "blockNumber": 7928827,
    "cumulativeGasUsed": "15094526",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x705D4bD211cE00bd62f47EC24F40Ba36f837F549",
    "0xf82506e3A7E6E981A0175C808026fF25e133fAE4",
    "0x2ca8e0c643bde4c2e08ab1fa0da3401adad7734d",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "500000000",
    "6326"
  ],
  "solcInputHash": "243bcb2753543eccc08154904bcab240",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eggs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AntNotYours\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantAffordEggs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantEnter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoEggs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TxnFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongEtherSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"cantLayEggsRightNow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AntCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"AntDied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AntSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EggsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"GotRequestId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MintedRandomEggs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canLayEggs\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastLaidEgg\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_antId\",\"type\":\"uint256\"}],\"name\":\"canAntLayEggs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePriceOfEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAnt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggs\",\"outputs\":[{\"internalType\":\"contract IEgg\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAntsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_antId\",\"type\":\"uint256\"}],\"name\":\"layEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_antId\",\"type\":\"uint256\"}],\"name\":\"sellAnt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewGovernanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CryptoAnts.sol\":\"CryptoAnts\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/CryptoAnts.sol\":{\"content\":\"import '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './interfaces/IEgg.sol';\\nimport './interfaces/ICryptoAnts.sol';\\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4 <0.9.0;\\n\\ncontract CryptoAnts is ERC721, ICryptoAnts, VRFConsumerBaseV2 {\\n  struct Ant {\\n    address owner;\\n    uint256 id;\\n    bool canLayEggs;\\n    uint256 timeOfLastLaidEgg;\\n  }\\n\\n  bool public locked = false;\\n  bool public override notLocked = false;\\n  mapping(uint256 => Ant) public ants;\\n  IEgg public immutable eggs;\\n  uint256 public eggPrice = 0.01 ether;\\n  uint256 public antsCreated = 0;\\n  uint256 private _currentAnt;\\n  address private immutable _governanceAddress;\\n  VRFCoordinatorV2Interface private immutable _vrfCoordinator;\\n  uint64 private immutable _subscriptionId;\\n  bytes32 private immutable _gasLane;\\n  uint32 private immutable _callbackGasLimit;\\n  uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n  uint32 private constant NUM_WORDS = 1;\\n\\n  constructor(\\n    address _eggs,\\n    address __governanceAddress,\\n    address vrfCoordinatorV2,\\n    bytes32 gasLane,\\n    uint32 callbackGasLimit,\\n    uint64 subscriptionId\\n  ) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721('Crypto Ants', 'ANTS') {\\n    eggs = IEgg(_eggs);\\n    _governanceAddress = __governanceAddress;\\n    _vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    _gasLane = gasLane;\\n    _callbackGasLimit = callbackGasLimit;\\n    _subscriptionId = subscriptionId;\\n  }\\n\\n  function buyEggs(uint256 _amount) external payable override lock {\\n    uint256 _eggPrice = eggPrice;\\n    uint256 eggsCallerCanBuy = (msg.value / _eggPrice);\\n\\n    if (eggsCallerCanBuy < _amount) revert CantAffordEggs();\\n    uint256 refundAmount = (eggsCallerCanBuy - _amount) * _eggPrice;\\n    if (refundAmount > 0) {\\n      // if we owe a refund we send one out\\n      // solhint-disable-next-line\\n      (bool success, ) = msg.sender.call{value: refundAmount}('');\\n      if (!success) revert TxnFailed();\\n    }\\n    eggs.mint(msg.sender, _amount);\\n    emit EggsBought(msg.sender, eggsCallerCanBuy);\\n  }\\n\\n  function createAnt() external {\\n    if (eggs.balanceOf(msg.sender) < 1) revert NoEggs();\\n    uint256 _antId = ++antsCreated;\\n    if (ants[_antId].id == _antId) revert AlreadyExists();\\n\\n    _mint(msg.sender, _antId);\\n    ants[_antId] = Ant({owner: msg.sender, id: _antId, canLayEggs: true, timeOfLastLaidEgg: 0});\\n    eggs.burn(msg.sender, 1); // burns egg after ant is hatched\\n    emit AntCreated();\\n  }\\n\\n  function layEggs(uint256 _antId) external {\\n    Ant memory ant = ants[_antId];\\n    // Reverts if the ant laid eggs less then 10 minutes ago\\n    if (ant.canLayEggs == false && (ant.timeOfLastLaidEgg + 10 minutes) > block.timestamp) revert cantLayEggsRightNow();\\n    // Reverts if the sender doesnt own this ant\\n    if (ant.owner != msg.sender) revert AntNotYours();\\n    _currentAnt = _antId;\\n    uint256 id = _vrfCoordinator.requestRandomWords(_gasLane, _subscriptionId, REQUEST_CONFIRMATIONS, _callbackGasLimit, NUM_WORDS);\\n    emit GotRequestId(id);\\n  }\\n\\n  function _layEggs(uint256 antId, uint256 amount) internal {\\n    Ant storage ant = ants[antId];\\n\\n    if (amount == 8) {\\n      // if the random number from 1-20 is 8 the ant dies (5% chance to die)\\n      delete ants[antId];\\n      _burn(antId);\\n      emit AntDied('Your ant has died!');\\n    }\\n\\n    if (amount != 8) {\\n      eggs.mint(ant.owner, amount);\\n      ant.timeOfLastLaidEgg = block.timestamp;\\n      ant.canLayEggs = false;\\n      emit MintedRandomEggs(amount);\\n    }\\n  }\\n\\n  function sellAnt(uint256 _antId) external {\\n    Ant memory ant = ants[_antId];\\n\\n    if (ant.owner != msg.sender) revert AntNotYours();\\n    // solhint-disable-next-line\\n    (bool success, ) = msg.sender.call{value: 0.004 ether}('');\\n    if (!success) revert TxnFailed();\\n    delete ants[_antId];\\n    _burn(_antId);\\n  }\\n\\n  function fulfillRandomWords(\\n    uint256, /* requestId */\\n    uint256[] memory randomWords\\n  ) internal override {\\n    uint256 randomNumber = (randomWords[0] % 20) + 1;\\n\\n    _layEggs(_currentAnt, randomNumber);\\n  }\\n\\n  function getContractBalance() public view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  function getAntsCreated() public view returns (uint256) {\\n    return antsCreated;\\n  }\\n\\n  function canAntLayEggs(uint256 _antId) public view returns (bool) {\\n    return ants[_antId].canLayEggs;\\n  }\\n\\n  function changePriceOfEgg(uint256 _price) external onlyGovernance {\\n    eggPrice = _price;\\n  }\\n\\n  function viewGovernanceAddress() public view returns (address) {\\n    return _governanceAddress;\\n  }\\n\\n  function _checkLock() internal view virtual {\\n    if (locked) revert CantEnter();\\n  }\\n\\n  modifier lock() {\\n    _checkLock();\\n    locked = true;\\n    _;\\n    locked = notLocked;\\n  }\\n\\n  modifier onlyGovernance() {\\n    if (msg.sender != _governanceAddress) revert OnlyGovernance();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x314de86e8df58be35766301017ec3a41fdbaf94d5b88991f9ea9cc5bbbee500b\",\"license\":\"Unlicense\"},\"contracts/interfaces/ICryptoAnts.sol\":{\"content\":\"pragma solidity >=0.8.4 <0.9.0;\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n//SPDX-License-Identifier: Unlicense\\n\\ninterface ICryptoAnts is IERC721 {\\n  event EggsBought(address indexed, uint256 indexed);\\n  event MintedRandomEggs(uint256 indexed);\\n  event AntDied(string);\\n  event GotRequestId(uint256 indexed id);\\n\\n  function notLocked() external view returns (bool);\\n\\n  function buyEggs(uint256) external payable;\\n\\n  error cantLayEggsRightNow();\\n  error AntNotYours();\\n  error NoEggs();\\n  event AntSold();\\n  error NoZeroAddress();\\n  event AntCreated();\\n  error AlreadyExists();\\n  error WrongEtherSent();\\n  error CantAffordEggs();\\n  error OnlyGovernance();\\n  error TxnFailed();\\n  error CantEnter();\\n}\\n\",\"keccak256\":\"0x64d61554cc9aad65d224b49aa9fe59bb65e076c368ae852df49a3f3e8e844585\",\"license\":\"Unlicense\"},\"contracts/interfaces/IEgg.sol\":{\"content\":\"pragma solidity >=0.8.4 <0.9.0;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n//SPDX-License-Identifier: Unlicense\\n\\ninterface IEgg is IERC20 {\\n  function mint(address, uint256) external;\\n\\n  function burn(address, uint256) external;\\n\\n  error OnlyAnts();\\n}\\n\",\"keccak256\":\"0x9996f14f0459b76fc36c867331d2f8a695d52315ede93748508304ee8c9bd9f8\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101606040526006805461ffff19169055662386f26fc1000060085560006009553480156200002d57600080fd5b5060405162002603380380620026038339810160408190526200005091620001dd565b604080518082018252600b81526a43727970746f20416e747360a81b602080830191825283518085019094526004845263414e545360e01b908401528151879391620000a091600091906200011a565b508051620000b69060019060208401906200011a565b505050606090811b6001600160601b031990811660805296811b871660a05294851b861660c09081529390941b90941660e0908152610120919091529290921b6001600160e01b03191661014052901b6001600160c01b03191661010052620002ac565b82805462000128906200026f565b90600052602060002090601f0160209004810192826200014c576000855562000197565b82601f106200016757805160ff191683800117855562000197565b8280016001018555821562000197579182015b82811115620001975782518255916020019190600101906200017a565b50620001a5929150620001a9565b5090565b5b80821115620001a55760008155600101620001aa565b80516001600160a01b0381168114620001d857600080fd5b919050565b60008060008060008060c08789031215620001f757600080fd5b6200020287620001c0565b95506200021260208801620001c0565b94506200022260408801620001c0565b935060608701519250608087015163ffffffff811681146200024357600080fd5b60a08801519092506001600160401b03811681146200026157600080fd5b809150509295509295509295565b600181811c908216806200028457607f821691505b60208210811415620002a657634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160c01c610120516101405160e01c6122c06200034360003960006112c10152600061125f0152600061128e015260006112f20152600081816104e70152610f610152600081816105770152818161097a01528181610b0101528181610c910152611b040152600081816108b401526108f601526122c06000f3fe6080604052600436106101c25760003560e01c80636352211e116100f7578063b88d4fde11610095578063dcc8c2d911610064578063dcc8c2d914610545578063e33f76cf14610565578063e985e9c514610599578063fac6b699146105e257600080fd5b8063b88d4fde146104b8578063c461f8b5146104d8578063c87b56dd1461050b578063cf3090121461052b57600080fd5b8063751928a1116100d1578063751928a11461044d57806395d89b411461046d578063a22cb46514610482578063a993efbc146104a257600080fd5b80636352211e146103fa5780636f9fb98a1461041a57806370a082311461042d57600080fd5b806323b872dd116101645780633d8712291161013e5780633d8712291461039257806342842e0e146103a75780634fd53596146103c757806361dcb054146103da57600080fd5b806323b872dd146103395780632e61a7bf14610359578063305e35521461036e57600080fd5b8063095ea7b3116101a0578063095ea7b314610256578063109dcfe61461027857806317e356a1146102fa5780631fe543e31461031957600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063081812fc1461021e575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611e7d565b610615565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b50610211610667565b6040516101f3919061203a565b34801561022a57600080fd5b5061023e610239366004611eb7565b6106f9565b6040516001600160a01b0390911681526020016101f3565b34801561026257600080fd5b50610276610271366004611e53565b610793565b005b34801561028457600080fd5b506102ca610293366004611eb7565b60076020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff9091169084565b604080516001600160a01b03909516855260208501939093529015159183019190915260608201526080016101f3565b34801561030657600080fd5b506006546101e790610100900460ff1681565b34801561032557600080fd5b50610276610334366004611ee9565b6108a9565b34801561034557600080fd5b50610276610354366004611d1b565b610931565b34801561036557600080fd5b50610276610962565b34801561037a57600080fd5b5061038460085481565b6040519081526020016101f3565b34801561039e57600080fd5b50600954610384565b3480156103b357600080fd5b506102766103c2366004611d1b565b610b89565b6102766103d5366004611eb7565b610ba4565b3480156103e657600080fd5b506102766103f5366004611eb7565b610d3f565b34801561040657600080fd5b5061023e610415366004611eb7565b610e58565b34801561042657600080fd5b5047610384565b34801561043957600080fd5b50610384610448366004611ccd565b610ecf565b34801561045957600080fd5b50610276610468366004611eb7565b610f56565b34801561047957600080fd5b50610211610fa4565b34801561048e57600080fd5b5061027661049d366004611e17565b610fb3565b3480156104ae57600080fd5b5061038460095481565b3480156104c457600080fd5b506102766104d3366004611d57565b611078565b3480156104e457600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061023e565b34801561051757600080fd5b50610211610526366004611eb7565b6110b0565b34801561053757600080fd5b506006546101e79060ff1681565b34801561055157600080fd5b50610276610560366004611eb7565b611198565b34801561057157600080fd5b5061023e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105a557600080fd5b506101e76105b4366004611ce8565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156105ee57600080fd5b506101e76105fd366004611eb7565b60009081526007602052604090206002015460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061064657506001600160e01b03198216635b5e139f60e01b145b8061066157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610676906121af565b80601f01602080910402602001604051908101604052809291908181526020018280546106a2906121af565b80156106ef5780601f106106c4576101008083540402835291602001916106ef565b820191906000526020600020905b8154815290600101906020018083116106d257829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107775760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061079e82610e58565b9050806001600160a01b0316836001600160a01b0316141561080c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161076e565b336001600160a01b0382161480610828575061082881336105b4565b61089a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161076e565b6108a483836113a9565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109235760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440161076e565b61092d8282611417565b5050565b61093b3382611459565b6109575760405162461bcd60e51b815260040161076e9061209f565b6108a4838383611550565b6040516370a0823160e01b81523360048201526001907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156109c457600080fd5b505afa1580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190611ed0565b1015610a1b57604051636c308a2f60e01b815260040160405180910390fd5b6000600960008154610a2c906121ea565b9182905550600081815260076020526040902060010154909150811415610a665760405163119b4fd360e11b815260040160405180910390fd5b610a7033826116f0565b6040805160808101825233808252602080830185815260018486018181526000606087018181528982526007909552879020955186546001600160a01b0319166001600160a01b039182161787559251868301555160028601805460ff191691151591909117905591516003909401939093559251632770a7eb60e21b8152600481019190915260248101929092527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac90604401600060405180830381600087803b158015610b4557600080fd5b505af1158015610b59573d6000803e3d6000fd5b50506040517fa38da27c8afea1e833812265c5f9c3f1def6eaf2e7d9b42c1b4d9d8ea69b0b75925060009150a150565b6108a483838360405180602001604052806000815250611078565b610bac611832565b6006805460ff191660011790556008546000610bc88234612139565b905082811015610beb5760405163c8cb54fd60e01b815260040160405180910390fd5b600082610bf8858461216c565b610c02919061214d565b90508015610c7557604051600090339083908381818185875af1925050503d8060008114610c4c576040519150601f19603f3d011682016040523d82523d6000602084013e610c51565b606091505b5050905080610c7357604051636473f19160e11b815260040160405180910390fd5b505b6040516340c10f1960e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b50506040518492503391507fecedcda9002dd5028204a70dddaa2155459b6dff3c3e20543450a189e736dc4990600090a350506006805460ff610100820416151560ff199091161790555050565b600081815260076020908152604091829020825160808101845281546001600160a01b0316808252600183015493820193909352600282015460ff161515938101939093526003015460608301523314610dac5760405163ee0c5b0560e01b815260040160405180910390fd5b6040516000903390660e35fa931a0000908381818185875af1925050503d8060008114610df5576040519150601f19603f3d011682016040523d82523d6000602084013e610dfa565b606091505b5050905080610e1c57604051636473f19160e11b815260040160405180910390fd5b600083815260076020526040812080546001600160a01b03191681556001810182905560028101805460ff19169055600301556108a483611858565b6000818152600260205260408120546001600160a01b0316806106615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161076e565b60006001600160a01b038216610f3a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161076e565b506001600160a01b031660009081526003602052604090205490565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f9f576040516354348f0360e01b815260040160405180910390fd5b600855565b606060018054610676906121af565b6001600160a01b03821633141561100c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161076e565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6110823383611459565b61109e5760405162461bcd60e51b815260040161076e9061209f565b6110aa848484846118f3565b50505050565b6000818152600260205260409020546060906001600160a01b031661112f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161076e565b600061114660408051602081019091526000815290565b905060008151116111665760405180602001604052806000815250611191565b8061117084611926565b604051602001611181929190611fce565b6040516020818303038152906040525b9392505050565b600081815260076020908152604091829020825160808101845281546001600160a01b03168152600182015492810192909252600281015460ff161580159383018490526003909101546060830152909161120357504281606001516102586112019190612121565b115b1561122157604051636a182c7760e01b815260040160405180910390fd5b80516001600160a01b0316331461124b5760405163ee0c5b0560e01b815260040160405180910390fd5b600a8290556040516305d3b1d360e41b81527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526003604482015263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166064820152600160848201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635d3b1d309060a401602060405180830381600087803b15801561133e57600080fd5b505af1158015611352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113769190611ed0565b60405190915081907f75bc6521e0a381a34635625cc81323f229645c7112f14564029c92bfbe628b4b90600090a2505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113de82610e58565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600060148260008151811061142e5761142e612245565b60200260200101516114409190612205565b61144b906001612121565b90506108a4600a5482611a24565b6000818152600260205260408120546001600160a01b03166114d25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161076e565b60006114dd83610e58565b9050806001600160a01b0316846001600160a01b031614806115185750836001600160a01b031661150d846106f9565b6001600160a01b0316145b8061154857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661156382610e58565b6001600160a01b0316146115cb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161076e565b6001600160a01b03821661162d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161076e565b6116386000826113a9565b6001600160a01b038316600090815260036020526040812080546001929061166190849061216c565b90915550506001600160a01b038216600090815260036020526040812080546001929061168f908490612121565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166117465760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161076e565b6000818152600260205260409020546001600160a01b0316156117ab5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161076e565b6001600160a01b03821660009081526003602052604081208054600192906117d4908490612121565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60065460ff161561185657604051637c943de560e11b815260040160405180910390fd5b565b600061186382610e58565b90506118706000836113a9565b6001600160a01b038116600090815260036020526040812080546001929061189990849061216c565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6118fe848484611550565b61190a84848484611ba4565b6110aa5760405162461bcd60e51b815260040161076e9061204d565b60608161194a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611974578061195e816121ea565b915061196d9050600a83612139565b915061194e565b60008167ffffffffffffffff81111561198f5761198f61225b565b6040519080825280601f01601f1916602001820160405280156119b9576020820181803683370190505b5090505b8415611548576119ce60018361216c565b91506119db600a86612205565b6119e6906030612121565b60f81b8183815181106119fb576119fb612245565b60200101906001600160f81b031916908160001a905350611a1d600a86612139565b94506119bd565b60008281526007602052604090206008821415611ad457600083815260076020526040812080546001600160a01b03191681556001810182905560028101805460ff1916905560030155611a7783611858565b7fa7107d3965e4e4842dc1fd2b9997f17d78304c31915ffebdf5065b57ad72455a604051611acb90602080825260129082015271596f757220616e742068617320646965642160701b604082015260600190565b60405180910390a15b816008146108a45780546040516340c10f1960e01b81526001600160a01b039182166004820152602481018490527f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015611b4a57600080fd5b505af1158015611b5e573d6000803e3d6000fd5b5050426003840155505060028101805460ff1916905560405182907f711e488f78fcccd2ce429ba37b5229ded868d4339cdd7e66fc00235ad8cca7a990600090a2505050565b60006001600160a01b0384163b15611ca657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611be8903390899088908890600401611ffd565b602060405180830381600087803b158015611c0257600080fd5b505af1925050508015611c32575060408051601f3d908101601f19168201909252611c2f91810190611e9a565b60015b611c8c573d808015611c60576040519150601f19603f3d011682016040523d82523d6000602084013e611c65565b606091505b508051611c845760405162461bcd60e51b815260040161076e9061204d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611548565b506001949350505050565b80356001600160a01b0381168114611cc857600080fd5b919050565b600060208284031215611cdf57600080fd5b61119182611cb1565b60008060408385031215611cfb57600080fd5b611d0483611cb1565b9150611d1260208401611cb1565b90509250929050565b600080600060608486031215611d3057600080fd5b611d3984611cb1565b9250611d4760208501611cb1565b9150604084013590509250925092565b60008060008060808587031215611d6d57600080fd5b611d7685611cb1565b93506020611d85818701611cb1565b935060408601359250606086013567ffffffffffffffff80821115611da957600080fd5b818801915088601f830112611dbd57600080fd5b813581811115611dcf57611dcf61225b565b611de1601f8201601f191685016120f0565b91508082528984828501011115611df757600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060408385031215611e2a57600080fd5b611e3383611cb1565b915060208301358015158114611e4857600080fd5b809150509250929050565b60008060408385031215611e6657600080fd5b611e6f83611cb1565b946020939093013593505050565b600060208284031215611e8f57600080fd5b813561119181612271565b600060208284031215611eac57600080fd5b815161119181612271565b600060208284031215611ec957600080fd5b5035919050565b600060208284031215611ee257600080fd5b5051919050565b60008060408385031215611efc57600080fd5b8235915060208084013567ffffffffffffffff80821115611f1c57600080fd5b818601915086601f830112611f3057600080fd5b813581811115611f4257611f4261225b565b8060051b9150611f538483016120f0565b8181528481019084860184860187018b1015611f6e57600080fd5b600095505b83861015611f91578035835260019590950194918601918601611f73565b508096505050505050509250929050565b60008151808452611fba816020860160208601612183565b601f01601f19169290920160200192915050565b60008351611fe0818460208801612183565b835190830190611ff4818360208801612183565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061203090830184611fa2565b9695505050505050565b6020815260006111916020830184611fa2565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156121195761211961225b565b604052919050565b6000821982111561213457612134612219565b500190565b6000826121485761214861222f565b500490565b600081600019048311821515161561216757612167612219565b500290565b60008282101561217e5761217e612219565b500390565b60005b8381101561219e578181015183820152602001612186565b838111156110aa5750506000910152565b600181811c908216806121c357607f821691505b602082108114156121e457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156121fe576121fe612219565b5060010190565b6000826122145761221461222f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461228757600080fd5b5056fea2646970667358221220a17a5fa55d2264680dd7be4229eb3c7c0bddf990d9742be1f2bea6fc6473d4bb64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80636352211e116100f7578063b88d4fde11610095578063dcc8c2d911610064578063dcc8c2d914610545578063e33f76cf14610565578063e985e9c514610599578063fac6b699146105e257600080fd5b8063b88d4fde146104b8578063c461f8b5146104d8578063c87b56dd1461050b578063cf3090121461052b57600080fd5b8063751928a1116100d1578063751928a11461044d57806395d89b411461046d578063a22cb46514610482578063a993efbc146104a257600080fd5b80636352211e146103fa5780636f9fb98a1461041a57806370a082311461042d57600080fd5b806323b872dd116101645780633d8712291161013e5780633d8712291461039257806342842e0e146103a75780634fd53596146103c757806361dcb054146103da57600080fd5b806323b872dd146103395780632e61a7bf14610359578063305e35521461036e57600080fd5b8063095ea7b3116101a0578063095ea7b314610256578063109dcfe61461027857806317e356a1146102fa5780631fe543e31461031957600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063081812fc1461021e575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611e7d565b610615565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b50610211610667565b6040516101f3919061203a565b34801561022a57600080fd5b5061023e610239366004611eb7565b6106f9565b6040516001600160a01b0390911681526020016101f3565b34801561026257600080fd5b50610276610271366004611e53565b610793565b005b34801561028457600080fd5b506102ca610293366004611eb7565b60076020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff9091169084565b604080516001600160a01b03909516855260208501939093529015159183019190915260608201526080016101f3565b34801561030657600080fd5b506006546101e790610100900460ff1681565b34801561032557600080fd5b50610276610334366004611ee9565b6108a9565b34801561034557600080fd5b50610276610354366004611d1b565b610931565b34801561036557600080fd5b50610276610962565b34801561037a57600080fd5b5061038460085481565b6040519081526020016101f3565b34801561039e57600080fd5b50600954610384565b3480156103b357600080fd5b506102766103c2366004611d1b565b610b89565b6102766103d5366004611eb7565b610ba4565b3480156103e657600080fd5b506102766103f5366004611eb7565b610d3f565b34801561040657600080fd5b5061023e610415366004611eb7565b610e58565b34801561042657600080fd5b5047610384565b34801561043957600080fd5b50610384610448366004611ccd565b610ecf565b34801561045957600080fd5b50610276610468366004611eb7565b610f56565b34801561047957600080fd5b50610211610fa4565b34801561048e57600080fd5b5061027661049d366004611e17565b610fb3565b3480156104ae57600080fd5b5061038460095481565b3480156104c457600080fd5b506102766104d3366004611d57565b611078565b3480156104e457600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061023e565b34801561051757600080fd5b50610211610526366004611eb7565b6110b0565b34801561053757600080fd5b506006546101e79060ff1681565b34801561055157600080fd5b50610276610560366004611eb7565b611198565b34801561057157600080fd5b5061023e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105a557600080fd5b506101e76105b4366004611ce8565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156105ee57600080fd5b506101e76105fd366004611eb7565b60009081526007602052604090206002015460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061064657506001600160e01b03198216635b5e139f60e01b145b8061066157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610676906121af565b80601f01602080910402602001604051908101604052809291908181526020018280546106a2906121af565b80156106ef5780601f106106c4576101008083540402835291602001916106ef565b820191906000526020600020905b8154815290600101906020018083116106d257829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107775760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061079e82610e58565b9050806001600160a01b0316836001600160a01b0316141561080c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161076e565b336001600160a01b0382161480610828575061082881336105b4565b61089a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161076e565b6108a483836113a9565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109235760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440161076e565b61092d8282611417565b5050565b61093b3382611459565b6109575760405162461bcd60e51b815260040161076e9061209f565b6108a4838383611550565b6040516370a0823160e01b81523360048201526001907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156109c457600080fd5b505afa1580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190611ed0565b1015610a1b57604051636c308a2f60e01b815260040160405180910390fd5b6000600960008154610a2c906121ea565b9182905550600081815260076020526040902060010154909150811415610a665760405163119b4fd360e11b815260040160405180910390fd5b610a7033826116f0565b6040805160808101825233808252602080830185815260018486018181526000606087018181528982526007909552879020955186546001600160a01b0319166001600160a01b039182161787559251868301555160028601805460ff191691151591909117905591516003909401939093559251632770a7eb60e21b8152600481019190915260248101929092527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac90604401600060405180830381600087803b158015610b4557600080fd5b505af1158015610b59573d6000803e3d6000fd5b50506040517fa38da27c8afea1e833812265c5f9c3f1def6eaf2e7d9b42c1b4d9d8ea69b0b75925060009150a150565b6108a483838360405180602001604052806000815250611078565b610bac611832565b6006805460ff191660011790556008546000610bc88234612139565b905082811015610beb5760405163c8cb54fd60e01b815260040160405180910390fd5b600082610bf8858461216c565b610c02919061214d565b90508015610c7557604051600090339083908381818185875af1925050503d8060008114610c4c576040519150601f19603f3d011682016040523d82523d6000602084013e610c51565b606091505b5050905080610c7357604051636473f19160e11b815260040160405180910390fd5b505b6040516340c10f1960e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b50506040518492503391507fecedcda9002dd5028204a70dddaa2155459b6dff3c3e20543450a189e736dc4990600090a350506006805460ff610100820416151560ff199091161790555050565b600081815260076020908152604091829020825160808101845281546001600160a01b0316808252600183015493820193909352600282015460ff161515938101939093526003015460608301523314610dac5760405163ee0c5b0560e01b815260040160405180910390fd5b6040516000903390660e35fa931a0000908381818185875af1925050503d8060008114610df5576040519150601f19603f3d011682016040523d82523d6000602084013e610dfa565b606091505b5050905080610e1c57604051636473f19160e11b815260040160405180910390fd5b600083815260076020526040812080546001600160a01b03191681556001810182905560028101805460ff19169055600301556108a483611858565b6000818152600260205260408120546001600160a01b0316806106615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161076e565b60006001600160a01b038216610f3a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161076e565b506001600160a01b031660009081526003602052604090205490565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f9f576040516354348f0360e01b815260040160405180910390fd5b600855565b606060018054610676906121af565b6001600160a01b03821633141561100c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161076e565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6110823383611459565b61109e5760405162461bcd60e51b815260040161076e9061209f565b6110aa848484846118f3565b50505050565b6000818152600260205260409020546060906001600160a01b031661112f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161076e565b600061114660408051602081019091526000815290565b905060008151116111665760405180602001604052806000815250611191565b8061117084611926565b604051602001611181929190611fce565b6040516020818303038152906040525b9392505050565b600081815260076020908152604091829020825160808101845281546001600160a01b03168152600182015492810192909252600281015460ff161580159383018490526003909101546060830152909161120357504281606001516102586112019190612121565b115b1561122157604051636a182c7760e01b815260040160405180910390fd5b80516001600160a01b0316331461124b5760405163ee0c5b0560e01b815260040160405180910390fd5b600a8290556040516305d3b1d360e41b81527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526003604482015263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166064820152600160848201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635d3b1d309060a401602060405180830381600087803b15801561133e57600080fd5b505af1158015611352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113769190611ed0565b60405190915081907f75bc6521e0a381a34635625cc81323f229645c7112f14564029c92bfbe628b4b90600090a2505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113de82610e58565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600060148260008151811061142e5761142e612245565b60200260200101516114409190612205565b61144b906001612121565b90506108a4600a5482611a24565b6000818152600260205260408120546001600160a01b03166114d25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161076e565b60006114dd83610e58565b9050806001600160a01b0316846001600160a01b031614806115185750836001600160a01b031661150d846106f9565b6001600160a01b0316145b8061154857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661156382610e58565b6001600160a01b0316146115cb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161076e565b6001600160a01b03821661162d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161076e565b6116386000826113a9565b6001600160a01b038316600090815260036020526040812080546001929061166190849061216c565b90915550506001600160a01b038216600090815260036020526040812080546001929061168f908490612121565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166117465760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161076e565b6000818152600260205260409020546001600160a01b0316156117ab5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161076e565b6001600160a01b03821660009081526003602052604081208054600192906117d4908490612121565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60065460ff161561185657604051637c943de560e11b815260040160405180910390fd5b565b600061186382610e58565b90506118706000836113a9565b6001600160a01b038116600090815260036020526040812080546001929061189990849061216c565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6118fe848484611550565b61190a84848484611ba4565b6110aa5760405162461bcd60e51b815260040161076e9061204d565b60608161194a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611974578061195e816121ea565b915061196d9050600a83612139565b915061194e565b60008167ffffffffffffffff81111561198f5761198f61225b565b6040519080825280601f01601f1916602001820160405280156119b9576020820181803683370190505b5090505b8415611548576119ce60018361216c565b91506119db600a86612205565b6119e6906030612121565b60f81b8183815181106119fb576119fb612245565b60200101906001600160f81b031916908160001a905350611a1d600a86612139565b94506119bd565b60008281526007602052604090206008821415611ad457600083815260076020526040812080546001600160a01b03191681556001810182905560028101805460ff1916905560030155611a7783611858565b7fa7107d3965e4e4842dc1fd2b9997f17d78304c31915ffebdf5065b57ad72455a604051611acb90602080825260129082015271596f757220616e742068617320646965642160701b604082015260600190565b60405180910390a15b816008146108a45780546040516340c10f1960e01b81526001600160a01b039182166004820152602481018490527f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015611b4a57600080fd5b505af1158015611b5e573d6000803e3d6000fd5b5050426003840155505060028101805460ff1916905560405182907f711e488f78fcccd2ce429ba37b5229ded868d4339cdd7e66fc00235ad8cca7a990600090a2505050565b60006001600160a01b0384163b15611ca657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611be8903390899088908890600401611ffd565b602060405180830381600087803b158015611c0257600080fd5b505af1925050508015611c32575060408051601f3d908101601f19168201909252611c2f91810190611e9a565b60015b611c8c573d808015611c60576040519150601f19603f3d011682016040523d82523d6000602084013e611c65565b606091505b508051611c845760405162461bcd60e51b815260040161076e9061204d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611548565b506001949350505050565b80356001600160a01b0381168114611cc857600080fd5b919050565b600060208284031215611cdf57600080fd5b61119182611cb1565b60008060408385031215611cfb57600080fd5b611d0483611cb1565b9150611d1260208401611cb1565b90509250929050565b600080600060608486031215611d3057600080fd5b611d3984611cb1565b9250611d4760208501611cb1565b9150604084013590509250925092565b60008060008060808587031215611d6d57600080fd5b611d7685611cb1565b93506020611d85818701611cb1565b935060408601359250606086013567ffffffffffffffff80821115611da957600080fd5b818801915088601f830112611dbd57600080fd5b813581811115611dcf57611dcf61225b565b611de1601f8201601f191685016120f0565b91508082528984828501011115611df757600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060408385031215611e2a57600080fd5b611e3383611cb1565b915060208301358015158114611e4857600080fd5b809150509250929050565b60008060408385031215611e6657600080fd5b611e6f83611cb1565b946020939093013593505050565b600060208284031215611e8f57600080fd5b813561119181612271565b600060208284031215611eac57600080fd5b815161119181612271565b600060208284031215611ec957600080fd5b5035919050565b600060208284031215611ee257600080fd5b5051919050565b60008060408385031215611efc57600080fd5b8235915060208084013567ffffffffffffffff80821115611f1c57600080fd5b818601915086601f830112611f3057600080fd5b813581811115611f4257611f4261225b565b8060051b9150611f538483016120f0565b8181528481019084860184860187018b1015611f6e57600080fd5b600095505b83861015611f91578035835260019590950194918601918601611f73565b508096505050505050509250929050565b60008151808452611fba816020860160208601612183565b601f01601f19169290920160200192915050565b60008351611fe0818460208801612183565b835190830190611ff4818360208801612183565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061203090830184611fa2565b9695505050505050565b6020815260006111916020830184611fa2565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156121195761211961225b565b604052919050565b6000821982111561213457612134612219565b500190565b6000826121485761214861222f565b500490565b600081600019048311821515161561216757612167612219565b500290565b60008282101561217e5761217e612219565b500390565b60005b8381101561219e578181015183820152602001612186565b838111156110aa5750506000910152565b600181811c908216806121c357607f821691505b602082108114156121e457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156121fe576121fe612219565b5060010190565b6000826122145761221461222f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461228757600080fd5b5056fea2646970667358221220a17a5fa55d2264680dd7be4229eb3c7c0bddf990d9742be1f2bea6fc6473d4bb64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2637,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2639,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2643,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2647,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2651,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2657,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5233,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "locked",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 5237,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "notLocked",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 5242,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "ants",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Ant)5230_storage)"
      },
      {
        "astId": 5248,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "eggPrice",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5251,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "antsCreated",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5253,
        "contract": "contracts/CryptoAnts.sol:CryptoAnts",
        "label": "_currentAnt",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Ant)5230_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CryptoAnts.Ant)",
        "numberOfBytes": "32",
        "value": "t_struct(Ant)5230_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Ant)5230_storage": {
        "encoding": "inplace",
        "label": "struct CryptoAnts.Ant",
        "members": [
          {
            "astId": 5223,
            "contract": "contracts/CryptoAnts.sol:CryptoAnts",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5225,
            "contract": "contracts/CryptoAnts.sol:CryptoAnts",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5227,
            "contract": "contracts/CryptoAnts.sol:CryptoAnts",
            "label": "canLayEggs",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 5229,
            "contract": "contracts/CryptoAnts.sol:CryptoAnts",
            "label": "timeOfLastLaidEgg",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}